(if (or (doom-context-p 'init) (doom-context-p 'reload)) (doom-context-with 'modules (set 'doom-modules '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ((:core) (:path "/home/n/.emacs.d/lisp/" :depth -110) (:user) (:path "/home/n/.config/doom/" :depth (-105 . 105)) (:config . use-package) (:path "/home/n/.emacs.d/modules/config/use-package" :depth -111) (:completion . company) (:path "/home/n/.emacs.d/modules/completion/company" :flags nil) (:completion . vertico) (:path "/home/n/.emacs.d/modules/completion/vertico" :flags nil) (:ui . doom) (:path "/home/n/.emacs.d/modules/ui/doom" :flags nil) (:ui . doom-dashboard) (:path "/home/n/.emacs.d/modules/ui/doom-dashboard" :flags nil) (:ui . hl-todo) (:path "/home/n/.emacs.d/modules/ui/hl-todo" :flags nil) (:ui . modeline) (:path "/home/n/.emacs.d/modules/ui/modeline" :flags nil) (:ui . ophints) (:path "/home/n/.emacs.d/modules/ui/ophints" :flags nil) (:ui . popup) (:path "/home/n/.emacs.d/modules/ui/popup" :flags (+defaults)) (:ui . vc-gutter) (:path "/home/n/.emacs.d/modules/ui/vc-gutter" :flags (+pretty)) (:ui . vi-tilde-fringe) (:path "/home/n/.emacs.d/modules/ui/vi-tilde-fringe" :flags nil) (:ui . workspaces) (:path "/home/n/.emacs.d/modules/ui/workspaces" :flags nil) (:editor . file-templates) (:path "/home/n/.emacs.d/modules/editor/file-templates" :flags nil) (:editor . fold) (:path "/home/n/.emacs.d/modules/editor/fold" :flags nil) (:editor . snippets) (:path "/home/n/.emacs.d/modules/editor/snippets" :flags nil) (:emacs . dired) (:path "/home/n/.emacs.d/modules/emacs/dired" :flags nil) (:emacs . electric) (:path "/home/n/.emacs.d/modules/emacs/electric" :flags nil) (:emacs . undo) (:path "/home/n/.emacs.d/modules/emacs/undo" :flags nil) (:emacs . vc) (:path "/home/n/.emacs.d/modules/emacs/vc" :flags nil) (:checkers . syntax) (:path "/home/n/.emacs.d/modules/checkers/syntax" :flags nil) (:tools . eval) (:path "/home/n/.emacs.d/modules/tools/eval" :flags (+overlay)) (:tools . lookup) (:path "/home/n/.emacs.d/modules/tools/lookup" :flags nil) (:tools . magit) (:path "/home/n/.emacs.d/modules/tools/magit" :flags nil) (:lang . emacs-lisp) (:path "/home/n/.emacs.d/modules/lang/emacs-lisp" :flags nil) (:lang . markdown) (:path "/home/n/.emacs.d/modules/lang/markdown" :flags nil) (:lang . org) (:path "/home/n/.emacs.d/modules/lang/org" :flags nil) (:lang . sh) (:path "/home/n/.emacs.d/modules/lang/sh" :flags nil) (:config . default) (:path "/home/n/.emacs.d/modules/config/default" :flags (+bindings +smartparens))))) (set 'doom-disabled-packages 'nil) (setplist ':core '(nil [0 -110 -110 :core nil nil nil])) (setplist ':user '(nil [1 105 -105 :user nil nil nil])) (setplist ':completion '(company [3 0 0 :completion company nil nil] vertico [4 0 0 :completion vertico nil nil])) (setplist ':ui '(doom [5 0 0 :ui doom nil nil] doom-dashboard [6 0 0 :ui doom-dashboard nil nil] hl-todo [7 0 0 :ui hl-todo nil nil] modeline [8 0 0 :ui modeline nil nil] ophints [9 0 0 :ui ophints nil nil] popup [10 0 0 :ui popup (+defaults) nil] vc-gutter [11 0 0 :ui vc-gutter (+pretty) nil] vi-tilde-fringe [12 0 0 :ui vi-tilde-fringe nil nil] workspaces [13 0 0 :ui workspaces nil nil])) (setplist ':editor '(file-templates [14 0 0 :editor file-templates nil nil] fold [15 0 0 :editor fold nil nil] snippets [16 0 0 :editor snippets nil nil])) (setplist ':emacs '(dired [17 0 0 :emacs dired nil nil] electric [18 0 0 :emacs electric nil nil] undo [19 0 0 :emacs undo nil nil] vc [20 0 0 :emacs vc nil nil])) (setplist ':checkers '(syntax [21 0 0 :checkers syntax nil nil])) (setplist ':tools '(eval [22 0 0 :tools eval (+overlay) nil] lookup [23 0 0 :tools lookup nil nil] magit [24 0 0 :tools magit nil nil])) (setplist ':lang '(emacs-lisp [25 0 0 :lang emacs-lisp nil nil] markdown [26 0 0 :lang markdown nil nil] org [27 0 0 :lang org nil nil] sh [28 0 0 :lang sh nil nil])) (setplist ':config '(use-package [2 -111 -111 :config use-package nil nil] default [29 0 0 :config default (+bindings +smartparens) nil])) (let ((old-custom-file custom-file)) (let ((doom-module-context [2 -111 -111 :config use-package nil nil])) (doom-load "~/.emacs.d/modules/config/use-package/init")) (let ((doom-module-context [0 -110 -110 :core nil nil nil])) (doom-load "~/.emacs.d/lisp/init")) (doom-run-hooks 'doom-before-modules-init-hook) (doom-run-hooks 'doom-after-modules-init-hook) (doom-run-hooks 'doom-before-modules-config-hook) (let ((doom-module-context [3 0 0 :completion company nil nil])) (doom-load "~/.emacs.d/modules/completion/company/config")) (let ((doom-module-context [4 0 0 :completion vertico nil nil])) (doom-load "~/.emacs.d/modules/completion/vertico/config")) (let ((doom-module-context [5 0 0 :ui doom nil nil])) (doom-load "~/.emacs.d/modules/ui/doom/config")) (let ((doom-module-context [6 0 0 :ui doom-dashboard nil nil])) (doom-load "~/.emacs.d/modules/ui/doom-dashboard/config")) (let ((doom-module-context [7 0 0 :ui hl-todo nil nil])) (doom-load "~/.emacs.d/modules/ui/hl-todo/config")) (let ((doom-module-context [8 0 0 :ui modeline nil nil])) (doom-load "~/.emacs.d/modules/ui/modeline/config")) (let ((doom-module-context [9 0 0 :ui ophints nil nil])) (doom-load "~/.emacs.d/modules/ui/ophints/config")) (let ((doom-module-context [10 0 0 :ui popup (+defaults) nil])) (doom-load "~/.emacs.d/modules/ui/popup/config")) (let ((doom-module-context [11 0 0 :ui vc-gutter (+pretty) nil])) (doom-load "~/.emacs.d/modules/ui/vc-gutter/config")) (let ((doom-module-context [13 0 0 :ui workspaces nil nil])) (doom-load "~/.emacs.d/modules/ui/workspaces/config")) (let ((doom-module-context [14 0 0 :editor file-templates nil nil])) (doom-load "~/.emacs.d/modules/editor/file-templates/config")) (let ((doom-module-context [15 0 0 :editor fold nil nil])) (doom-load "~/.emacs.d/modules/editor/fold/config")) (let ((doom-module-context [16 0 0 :editor snippets nil nil])) (doom-load "~/.emacs.d/modules/editor/snippets/config")) (let ((doom-module-context [17 0 0 :emacs dired nil nil])) (doom-load "~/.emacs.d/modules/emacs/dired/config")) (let ((doom-module-context [18 0 0 :emacs electric nil nil])) (doom-load "~/.emacs.d/modules/emacs/electric/config")) (let ((doom-module-context [19 0 0 :emacs undo nil nil])) (doom-load "~/.emacs.d/modules/emacs/undo/config")) (let ((doom-module-context [20 0 0 :emacs vc nil nil])) (doom-load "~/.emacs.d/modules/emacs/vc/config")) (let ((doom-module-context [21 0 0 :checkers syntax nil nil])) (doom-load "~/.emacs.d/modules/checkers/syntax/config")) (let ((doom-module-context [22 0 0 :tools eval (+overlay) nil])) (doom-load "~/.emacs.d/modules/tools/eval/config")) (let ((doom-module-context [23 0 0 :tools lookup nil nil])) (doom-load "~/.emacs.d/modules/tools/lookup/config")) (let ((doom-module-context [24 0 0 :tools magit nil nil])) (doom-load "~/.emacs.d/modules/tools/magit/config")) (let ((doom-module-context [25 0 0 :lang emacs-lisp nil nil])) (doom-load "~/.emacs.d/modules/lang/emacs-lisp/config")) (let ((doom-module-context [26 0 0 :lang markdown nil nil])) (doom-load "~/.emacs.d/modules/lang/markdown/config")) (let ((doom-module-context [27 0 0 :lang org nil nil])) (doom-load "~/.emacs.d/modules/lang/org/config")) (let ((doom-module-context [28 0 0 :lang sh nil nil])) (doom-load "~/.emacs.d/modules/lang/sh/config")) (let ((doom-module-context [29 0 0 :config default (+bindings +smartparens) nil])) (doom-load "~/.emacs.d/modules/config/default/config")) (doom-run-hooks 'doom-after-modules-config-hook) (let ((doom-module-context [1 105 -105 :user nil nil nil])) (doom-load "~/.config/doom/config")) (when (eq custom-file old-custom-file) (doom-load custom-file 'noerror)))))